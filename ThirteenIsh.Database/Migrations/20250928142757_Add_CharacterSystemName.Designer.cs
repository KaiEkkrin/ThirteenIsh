// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThirteenIsh.Database;

#nullable disable

namespace ThirteenIsh.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250928142757_Add_CharacterSystemName")]
    partial class Add_CharacterSystemName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Adventure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("NameUpper")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Name")
                        .IsUnique();

                    b.HasIndex("GuildId", "NameUpper")
                        .IsUnique();

                    b.ToTable("Adventures");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Adventurer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AdventureId")
                        .HasColumnType("bigint");

                    b.Property<string>("CharacterSystemName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("NameUpper")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId", "Name")
                        .IsUnique();

                    b.HasIndex("AdventureId", "NameUpper")
                        .IsUnique();

                    b.HasIndex("AdventureId", "UserId")
                        .IsUnique();

                    b.ToTable("Adventurers");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CharacterSystemName")
                        .HasColumnType("text");

                    b.Property<int>("CharacterType")
                        .HasColumnType("integer");

                    b.Property<string>("GameSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastEdited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("NameUpper")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "CharacterType", "Name")
                        .IsUnique();

                    b.HasIndex("UserId", "CharacterType", "NameUpper")
                        .IsUnique();

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Encounter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdventureName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("PinnedMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<string>("TurnAlias")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "ChannelId")
                        .IsUnique();

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Guild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CommandVersion")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentAdventureName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("GmRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("GuildId")
                        .IsUnique();

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.MessageBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp");

                    b.ToTable("Messages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MessageBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.AddCharacterMessage", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.MessageBase");

                    b.Property<int>("CharacterType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("CharacterType")
                                .HasColumnName("AddCharacterMessage_CharacterType");

                            t.Property("Name")
                                .HasColumnName("AddCharacterMessage_Name");
                        });

                    b.HasDiscriminator().HasValue("AddCharacterMessage");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.AdventureMessageBase", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.MessageBase");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("AdventureMessageBase_Name");
                        });

                    b.HasDiscriminator().HasValue("AdventureMessageBase");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.DeleteCharacterMessage", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.MessageBase");

                    b.Property<int>("CharacterType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("CharacterType")
                                .HasColumnName("DeleteCharacterMessage_CharacterType");

                            t.Property("Name")
                                .HasColumnName("DeleteCharacterMessage_Name");
                        });

                    b.HasDiscriminator().HasValue("DeleteCharacterMessage");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.DeleteCustomCounterMessage", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.MessageBase");

                    b.Property<string>("CcName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CharacterType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("CharacterType")
                                .HasColumnName("DeleteCustomCounterMessage_CharacterType");

                            t.Property("Name")
                                .HasColumnName("DeleteCustomCounterMessage_Name");
                        });

                    b.HasDiscriminator().HasValue("DeleteCustomCounterMessage");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.ListCharactersMessage", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.MessageBase");

                    b.Property<bool>("After")
                        .HasColumnType("boolean");

                    b.Property<int>("CharacterType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PageSize")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ListCharactersMessage");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.DeleteAdventureMessage", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.AdventureMessageBase");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("AdventureMessageBase_Name");
                        });

                    b.HasDiscriminator().HasValue("DeleteAdventureMessage");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.EncounterMessageBase", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.AdventureMessageBase");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("AdventureMessageBase_Name");
                        });

                    b.HasDiscriminator().HasValue("EncounterMessageBase");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.LeaveAdventureMessage", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.AdventureMessageBase");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("AdventureMessageBase_Name");
                        });

                    b.HasDiscriminator().HasValue("LeaveAdventureMessage");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.ResetAdventurerMessage", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.AdventureMessageBase");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("AdventureMessageBase_Name");
                        });

                    b.HasDiscriminator().HasValue("ResetAdventurerMessage");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.EncounterDamageMessage", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.EncounterMessageBase");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CharacterType")
                        .HasColumnType("integer");

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("AdventureMessageBase_Name");

                            t.Property("CharacterType")
                                .HasColumnName("EncounterDamageMessage_CharacterType");
                        });

                    b.HasDiscriminator().HasValue("EncounterDamageMessage");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Messages.EndEncounterMessage", b =>
                {
                    b.HasBaseType("ThirteenIsh.Database.Entities.Messages.EncounterMessageBase");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("AdventureMessageBase_Name");
                        });

                    b.HasDiscriminator().HasValue("EndEncounterMessage");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Adventure", b =>
                {
                    b.HasOne("ThirteenIsh.Database.Entities.Guild", "Guild")
                        .WithMany("Adventures")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Adventurer", b =>
                {
                    b.HasOne("ThirteenIsh.Database.Entities.Adventure", "Adventure")
                        .WithMany("Adventurers")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ThirteenIsh.Database.Entities.FixesSheet", "Fixes", b1 =>
                        {
                            b1.Property<long>("AdventurerId")
                                .HasColumnType("bigint");

                            b1.HasKey("AdventurerId");

                            b1.ToTable("Adventurers");

                            b1.ToJson("Fixes");

                            b1.WithOwner()
                                .HasForeignKey("AdventurerId");

                            b1.OwnsMany("ThirteenIsh.Database.Entities.PropertyValue<int>", "Counters", b2 =>
                                {
                                    b2.Property<long>("FixesSheetAdventurerId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("Value")
                                        .HasColumnType("integer");

                                    b2.HasKey("FixesSheetAdventurerId", "Id");

                                    b2.ToTable("Adventurers");

                                    b2.WithOwner()
                                        .HasForeignKey("FixesSheetAdventurerId");
                                });

                            b1.Navigation("Counters");
                        });

                    b.OwnsOne("ThirteenIsh.Database.Entities.CharacterSheet", "Sheet", b1 =>
                        {
                            b1.Property<long>("AdventurerId")
                                .HasColumnType("bigint");

                            b1.HasKey("AdventurerId");

                            b1.ToTable("Adventurers");

                            b1.ToJson("Sheet");

                            b1.WithOwner()
                                .HasForeignKey("AdventurerId");

                            b1.OwnsMany("ThirteenIsh.Database.Entities.Adventurer.Sheet#CharacterSheet.Counters#PropertyValue", "Counters", b2 =>
                                {
                                    b2.Property<long>("CharacterSheetAdventurerId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("Value")
                                        .HasColumnType("integer");

                                    b2.HasKey("CharacterSheetAdventurerId", "Id");

                                    b2.ToTable("Adventurers");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterSheetAdventurerId");
                                });

                            b1.OwnsMany("ThirteenIsh.Database.Entities.CustomCounter", "CustomCounters", b2 =>
                                {
                                    b2.Property<long>("CharacterSheetAdventurerId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<int>("DefaultValue")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("Options")
                                        .HasColumnType("integer");

                                    b2.HasKey("CharacterSheetAdventurerId", "Id");

                                    b2.ToTable("Adventurers");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterSheetAdventurerId");
                                });

                            b1.OwnsMany("ThirteenIsh.Database.Entities.Adventurer.Sheet#CharacterSheet.Properties#PropertyValue", "Properties", b2 =>
                                {
                                    b2.Property<long>("CharacterSheetAdventurerId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Value")
                                        .HasColumnType("text");

                                    b2.HasKey("CharacterSheetAdventurerId", "Id");

                                    b2.ToTable("Adventurers");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterSheetAdventurerId");
                                });

                            b1.Navigation("Counters");

                            b1.Navigation("CustomCounters");

                            b1.Navigation("Properties");
                        });

                    b.OwnsOne("ThirteenIsh.Database.Entities.VariablesSheet", "Variables", b1 =>
                        {
                            b1.Property<long>("AdventurerId")
                                .HasColumnType("bigint");

                            b1.Property<string[]>("Tags")
                                .HasColumnType("text[]");

                            b1.HasKey("AdventurerId");

                            b1.ToTable("Adventurers");

                            b1.ToJson("Variables");

                            b1.WithOwner()
                                .HasForeignKey("AdventurerId");

                            b1.OwnsMany("ThirteenIsh.Database.Entities.PropertyValue<int>", "Counters", b2 =>
                                {
                                    b2.Property<long>("VariablesSheetAdventurerId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("Value")
                                        .HasColumnType("integer");

                                    b2.HasKey("VariablesSheetAdventurerId", "Id");

                                    b2.ToTable("Adventurers");

                                    b2.WithOwner()
                                        .HasForeignKey("VariablesSheetAdventurerId");
                                });

                            b1.Navigation("Counters");
                        });

                    b.Navigation("Adventure");

                    b.Navigation("Fixes")
                        .IsRequired();

                    b.Navigation("Sheet")
                        .IsRequired();

                    b.Navigation("Variables")
                        .IsRequired();
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Character", b =>
                {
                    b.OwnsOne("ThirteenIsh.Database.Entities.CharacterSheet", "Sheet", b1 =>
                        {
                            b1.Property<long>("CharacterId")
                                .HasColumnType("bigint");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Sheet");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");

                            b1.OwnsMany("ThirteenIsh.Database.Entities.PropertyValue<int>", "Counters", b2 =>
                                {
                                    b2.Property<long>("CharacterSheetCharacterId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("Value")
                                        .HasColumnType("integer");

                                    b2.HasKey("CharacterSheetCharacterId", "Id");

                                    b2.ToTable("Characters");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterSheetCharacterId");
                                });

                            b1.OwnsMany("ThirteenIsh.Database.Entities.CustomCounter", "CustomCounters", b2 =>
                                {
                                    b2.Property<long>("CharacterSheetCharacterId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<int>("DefaultValue")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("Options")
                                        .HasColumnType("integer");

                                    b2.HasKey("CharacterSheetCharacterId", "Id");

                                    b2.ToTable("Characters");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterSheetCharacterId");
                                });

                            b1.OwnsMany("ThirteenIsh.Database.Entities.PropertyValue<string>", "Properties", b2 =>
                                {
                                    b2.Property<long>("CharacterSheetCharacterId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Value")
                                        .HasColumnType("text");

                                    b2.HasKey("CharacterSheetCharacterId", "Id");

                                    b2.ToTable("Characters");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterSheetCharacterId");
                                });

                            b1.Navigation("Counters");

                            b1.Navigation("CustomCounters");

                            b1.Navigation("Properties");
                        });

                    b.Navigation("Sheet")
                        .IsRequired();
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Encounter", b =>
                {
                    b.HasOne("ThirteenIsh.Database.Entities.Guild", "Guild")
                        .WithMany("Encounters")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ThirteenIsh.Database.Entities.EncounterState", "State", b1 =>
                        {
                            b1.Property<long>("EncounterId")
                                .HasColumnType("bigint");

                            b1.HasKey("EncounterId");

                            b1.ToTable("Encounters");

                            b1.ToJson("State");

                            b1.WithOwner()
                                .HasForeignKey("EncounterId");

                            b1.OwnsMany("ThirteenIsh.Database.Entities.Combatants.AdventurerCombatant", "Adventurers", b2 =>
                                {
                                    b2.Property<long>("EncounterStateEncounterId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Alias")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("Initiative")
                                        .HasColumnType("integer");

                                    b2.Property<int>("InitiativeAdjustment")
                                        .HasColumnType("integer");

                                    b2.Property<string>("InitiativeRollWorking")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<decimal>("UserId")
                                        .HasColumnType("numeric(20,0)");

                                    b2.HasKey("EncounterStateEncounterId", "Id");

                                    b2.ToTable("Encounters");

                                    b2.WithOwner()
                                        .HasForeignKey("EncounterStateEncounterId");
                                });

                            b1.OwnsMany("ThirteenIsh.Database.Entities.Combatants.MonsterCombatant", "Monsters", b2 =>
                                {
                                    b2.Property<long>("EncounterStateEncounterId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Alias")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("CharacterSystemName")
                                        .HasColumnType("text");

                                    b2.Property<int>("Initiative")
                                        .HasColumnType("integer");

                                    b2.Property<int>("InitiativeAdjustment")
                                        .HasColumnType("integer");

                                    b2.Property<string>("InitiativeRollWorking")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<DateTimeOffset>("LastUpdated")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("SwarmCount")
                                        .HasColumnType("integer");

                                    b2.Property<decimal>("UserId")
                                        .HasColumnType("numeric(20,0)");

                                    b2.HasKey("EncounterStateEncounterId", "Id");

                                    b2.ToTable("Encounters");

                                    b2.WithOwner()
                                        .HasForeignKey("EncounterStateEncounterId");

                                    b2.OwnsOne("ThirteenIsh.Database.Entities.FixesSheet", "Fixes", b3 =>
                                        {
                                            b3.Property<long>("MonsterCombatantEncounterStateEncounterId")
                                                .HasColumnType("bigint");

                                            b3.Property<int>("MonsterCombatantId")
                                                .HasColumnType("integer");

                                            b3.HasKey("MonsterCombatantEncounterStateEncounterId", "MonsterCombatantId");

                                            b3.ToTable("Encounters");

                                            b3.WithOwner()
                                                .HasForeignKey("MonsterCombatantEncounterStateEncounterId", "MonsterCombatantId");

                                            b3.OwnsMany("ThirteenIsh.Database.Entities.PropertyValue<int>", "Counters", b4 =>
                                                {
                                                    b4.Property<long>("FixesSheetMonsterCombatantEncounterStateEncounterId")
                                                        .HasColumnType("bigint");

                                                    b4.Property<int>("FixesSheetMonsterCombatantId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("Id")
                                                        .ValueGeneratedOnAdd()
                                                        .HasColumnType("integer");

                                                    b4.Property<string>("Name")
                                                        .IsRequired()
                                                        .HasColumnType("text");

                                                    b4.Property<int>("Value")
                                                        .HasColumnType("integer");

                                                    b4.HasKey("FixesSheetMonsterCombatantEncounterStateEncounterId", "FixesSheetMonsterCombatantId", "Id");

                                                    b4.ToTable("Encounters");

                                                    b4.WithOwner()
                                                        .HasForeignKey("FixesSheetMonsterCombatantEncounterStateEncounterId", "FixesSheetMonsterCombatantId");
                                                });

                                            b3.Navigation("Counters");
                                        });

                                    b2.OwnsOne("ThirteenIsh.Database.Entities.CharacterSheet", "Sheet", b3 =>
                                        {
                                            b3.Property<long>("MonsterCombatantEncounterStateEncounterId")
                                                .HasColumnType("bigint");

                                            b3.Property<int>("MonsterCombatantId")
                                                .HasColumnType("integer");

                                            b3.HasKey("MonsterCombatantEncounterStateEncounterId", "MonsterCombatantId");

                                            b3.ToTable("Encounters");

                                            b3.WithOwner()
                                                .HasForeignKey("MonsterCombatantEncounterStateEncounterId", "MonsterCombatantId");

                                            b3.OwnsMany("ThirteenIsh.Database.Entities.PropertyValue<int>", "Counters", b4 =>
                                                {
                                                    b4.Property<long>("CharacterSheetMonsterCombatantEncounterStateEncounterId")
                                                        .HasColumnType("bigint");

                                                    b4.Property<int>("CharacterSheetMonsterCombatantId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("Id")
                                                        .ValueGeneratedOnAdd()
                                                        .HasColumnType("integer");

                                                    b4.Property<string>("Name")
                                                        .IsRequired()
                                                        .HasColumnType("text");

                                                    b4.Property<int>("Value")
                                                        .HasColumnType("integer");

                                                    b4.HasKey("CharacterSheetMonsterCombatantEncounterStateEncounterId", "CharacterSheetMonsterCombatantId", "Id");

                                                    b4.ToTable("Encounters");

                                                    b4.WithOwner()
                                                        .HasForeignKey("CharacterSheetMonsterCombatantEncounterStateEncounterId", "CharacterSheetMonsterCombatantId");
                                                });

                                            b3.OwnsMany("ThirteenIsh.Database.Entities.CustomCounter", "CustomCounters", b4 =>
                                                {
                                                    b4.Property<long>("CharacterSheetMonsterCombatantEncounterStateEncounterId")
                                                        .HasColumnType("bigint");

                                                    b4.Property<int>("CharacterSheetMonsterCombatantId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("Id")
                                                        .ValueGeneratedOnAdd()
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("DefaultValue")
                                                        .HasColumnType("integer");

                                                    b4.Property<string>("Name")
                                                        .IsRequired()
                                                        .HasColumnType("text");

                                                    b4.Property<int>("Options")
                                                        .HasColumnType("integer");

                                                    b4.HasKey("CharacterSheetMonsterCombatantEncounterStateEncounterId", "CharacterSheetMonsterCombatantId", "Id");

                                                    b4.ToTable("Encounters");

                                                    b4.WithOwner()
                                                        .HasForeignKey("CharacterSheetMonsterCombatantEncounterStateEncounterId", "CharacterSheetMonsterCombatantId");
                                                });

                                            b3.OwnsMany("ThirteenIsh.Database.Entities.PropertyValue<string>", "Properties", b4 =>
                                                {
                                                    b4.Property<long>("CharacterSheetMonsterCombatantEncounterStateEncounterId")
                                                        .HasColumnType("bigint");

                                                    b4.Property<int>("CharacterSheetMonsterCombatantId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("Id")
                                                        .ValueGeneratedOnAdd()
                                                        .HasColumnType("integer");

                                                    b4.Property<string>("Name")
                                                        .IsRequired()
                                                        .HasColumnType("text");

                                                    b4.Property<string>("Value")
                                                        .HasColumnType("text");

                                                    b4.HasKey("CharacterSheetMonsterCombatantEncounterStateEncounterId", "CharacterSheetMonsterCombatantId", "Id");

                                                    b4.ToTable("Encounters");

                                                    b4.WithOwner()
                                                        .HasForeignKey("CharacterSheetMonsterCombatantEncounterStateEncounterId", "CharacterSheetMonsterCombatantId");
                                                });

                                            b3.Navigation("Counters");

                                            b3.Navigation("CustomCounters");

                                            b3.Navigation("Properties");
                                        });

                                    b2.OwnsOne("ThirteenIsh.Database.Entities.VariablesSheet", "Variables", b3 =>
                                        {
                                            b3.Property<long>("MonsterCombatantEncounterStateEncounterId")
                                                .HasColumnType("bigint");

                                            b3.Property<int>("MonsterCombatantId")
                                                .HasColumnType("integer");

                                            b3.Property<string[]>("Tags")
                                                .HasColumnType("text[]");

                                            b3.HasKey("MonsterCombatantEncounterStateEncounterId", "MonsterCombatantId");

                                            b3.ToTable("Encounters");

                                            b3.WithOwner()
                                                .HasForeignKey("MonsterCombatantEncounterStateEncounterId", "MonsterCombatantId");

                                            b3.OwnsMany("ThirteenIsh.Database.Entities.PropertyValue<int>", "Counters", b4 =>
                                                {
                                                    b4.Property<long>("VariablesSheetMonsterCombatantEncounterStateEncounterId")
                                                        .HasColumnType("bigint");

                                                    b4.Property<int>("VariablesSheetMonsterCombatantId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("Id")
                                                        .ValueGeneratedOnAdd()
                                                        .HasColumnType("integer");

                                                    b4.Property<string>("Name")
                                                        .IsRequired()
                                                        .HasColumnType("text");

                                                    b4.Property<int>("Value")
                                                        .HasColumnType("integer");

                                                    b4.HasKey("VariablesSheetMonsterCombatantEncounterStateEncounterId", "VariablesSheetMonsterCombatantId", "Id");

                                                    b4.ToTable("Encounters");

                                                    b4.WithOwner()
                                                        .HasForeignKey("VariablesSheetMonsterCombatantEncounterStateEncounterId", "VariablesSheetMonsterCombatantId");
                                                });

                                            b3.Navigation("Counters");
                                        });

                                    b2.Navigation("Fixes")
                                        .IsRequired();

                                    b2.Navigation("Sheet")
                                        .IsRequired();

                                    b2.Navigation("Variables")
                                        .IsRequired();
                                });

                            b1.OwnsMany("ThirteenIsh.Database.Entities.PropertyValue<int>", "Counters", b2 =>
                                {
                                    b2.Property<long>("EncounterStateEncounterId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("Value")
                                        .HasColumnType("integer");

                                    b2.HasKey("EncounterStateEncounterId", "Id");

                                    b2.ToTable("Encounters");

                                    b2.WithOwner()
                                        .HasForeignKey("EncounterStateEncounterId");
                                });

                            b1.Navigation("Adventurers");

                            b1.Navigation("Counters");

                            b1.Navigation("Monsters");
                        });

                    b.Navigation("Guild");

                    b.Navigation("State")
                        .IsRequired();
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Adventure", b =>
                {
                    b.Navigation("Adventurers");
                });

            modelBuilder.Entity("ThirteenIsh.Database.Entities.Guild", b =>
                {
                    b.Navigation("Adventures");

                    b.Navigation("Encounters");
                });
#pragma warning restore 612, 618
        }
    }
}
